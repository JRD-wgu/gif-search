{"version":3,"sources":["components/Gif_search.js","components/GifCard.js","components/GifList.js","index.js"],"names":["GifSearch","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","debounceQuery","_","debounce","onInputChange","state","query","setState","props","onQueryUpdate","_this2","react_default","a","createElement","className","id","onChange","event","target","value","Component","GifCard","image","rel","href","gif","url","src","images","original","alt","GifList","gifItems","gifs","map","components_GifCard","key","App","handleQueryUpdate","bind","assertThisInitialized","randomGifs","i","request","get","err","res","push","body","data","_this3","queryString","values","toString","replace","concat","componentDidMount","end","_this4","Gif_search","components_GifList","ReactDOM","render","src_App","document","getElementById"],"mappings":"2OAmCeA,cA7BX,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACVC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAeJI,cAAgBC,IAAEC,SAAUT,EAAKU,cAAgB,KAZ7CV,EAAKW,MAAQ,CAAEC,MAAO,IAJZZ,6EASAY,GACVT,KAAKU,SAAS,CAACD,MAAQA,IACvBT,KAAKW,MAAMC,cAAc,CAACH,2CASrB,IAAAI,EAAAb,KACL,OACIc,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAAA,SAAOE,GAAG,QAAQC,SAAU,SAAAC,GAAK,OAAIP,EAAKT,cAAcgB,EAAMC,OAAOC,kBAxB7DC,aCSTC,EAVC,SAACC,GACb,OACIX,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aACVH,EAAAC,EAAAC,cAAA,KAAGK,OAAO,SAASK,IAAI,sBAAsBC,KAAMF,EAAMG,IAAIC,KACzDf,EAAAC,EAAAC,cAAA,OAAKE,GAAG,MAAMY,IAAKL,EAAMG,IAAIG,OAAOC,SAASH,IAAKI,IAAI,SAD1D,OCiBGC,EAlBC,SAACvB,GACb,IAAMwB,EAAWxB,EAAMyB,KAAKC,IAAI,SAACZ,GAC7B,OAAOX,EAAAC,EAAAC,cAACsB,EAAD,CAASC,IAAKd,EAAMP,GAAIU,IAAKH,MAGxC,OACIX,EAAAC,EAAAC,cAAA,OAAKC,UAAW,kBACdH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,kBAAd,IAAiCkB,EAAjC,uBCGJK,cAEF,SAAAA,IAAc,IAAA3C,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAwC,IACV3C,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA0C,GAAArC,KAAAH,QACKQ,MAAQ,CACT4B,KAAM,IAEVvC,EAAK4C,kBAAoB5C,EAAK4C,kBAAkBC,KAAvB5C,OAAA6C,EAAA,EAAA7C,CAAAD,IALfA,mFAWV,IAFgB,IAAAgB,EAAAb,KACV4C,EAAa,GACVC,EAAI,EAAGA,EAAI,EAAGA,IACnBC,IAAQC,IAAI,gFAAiF,SAACC,EAAKC,GAC/FL,EAAWM,KAAKD,EAAIE,KAAKC,MACzBvC,EAAKH,SAAS,CAAC0B,KAAMQ,gDAKfnC,GAAO,IAAA4C,EAAArD,KAGjBsD,EAAcxD,OAAOyD,OAAO9C,GAAO+C,WAGvCF,EAAcA,EAAYG,QAAQ,MAAO,KACzC,IAAI5B,EAAG,mFAAA6B,OAAsFJ,EAAtF,YAGa,KAAhBA,EACAtD,KAAK2D,oBAILb,IACCC,IAAIlB,GACJ+B,IAAI,SAACZ,EAAKC,GAEPI,EAAK3C,SAAS,CAAC0B,KAAMa,EAAIE,KAAKC,0CAQjC,IAAAS,EAAA7D,KAEL,OACIc,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKE,GAAI,UACLJ,EAAAC,EAAAC,cAAA,MAAIE,GAAI,SAAR,mBAEJJ,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAC8C,EAAD,CAAWlD,cAAe,SAAAH,GAAK,OAAIoD,EAAKpB,kBAAkBhC,OAE9DK,EAAAC,EAAAC,cAAC+C,EAAD,CAAS3B,KAAMpC,KAAKQ,MAAM4B,eA1DxBb,aAiElByC,IAASC,OAAOnD,EAAAC,EAAAC,cAACkD,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.1a71ff34.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport '../styles/App.css';\nimport _ from 'underscore';\n\n// This component creates the searchbar\nclass GifSearch extends Component {\n    constructor() {\n        super();\n        // initialize query as an empty string which is used to return random gifs when page is loaded\n        // or when search is backspaced\n        this.state = { query: '' }\n    }\n        // assign the state of \"query\" to the value of the input in the searchbar\n        // pass the value of state : query to index.js to make API requests\n        // this function depends on debounceQuery\n    onInputChange(query) {\n        this.setState({query : query});\n        this.props.onQueryUpdate({query});\n    }\n        // Sets a timer every time input changes\n        // calls onInputChange after timeout has expired, with last argument passed to it.\n        // timer resets with each invocation. It prevents large amounts of requests in a short period of time\n    debounceQuery = _.debounce((this.onInputChange), 350);\n\n\n\n    render() {\n        return (\n            <div className=\"search\">\n                <input id=\"input\" onChange={event => this.debounceQuery(event.target.value)} />\n            </div>\n        );\n    }\n}\n\nexport default GifSearch;\n\n","import React from 'react';\nimport '../styles/App.css';\n// stateless component that receives gif's image url and applies as the source, creating a list item for each gif in array\n// that's returned by the api request\nconst GifCard = (image) => {\n    return (\n        <li className=\"grid-item\">\n            <a target=\"_blank\" rel=\"noopener noreferrer\" href={image.gif.url}>\n                <img id=\"gif\" src={image.gif.images.original.url} alt=\"gifs\" /> </a>\n\n        </li>\n    )\n};\n\nexport default GifCard;","import React from \"react\";\nimport GifCard from \"./GifCard\";\nimport '../styles/App.css';\n\n// create component(stateless) that accepts array of Gifs and maps through the array,\n// displaying one GifCard for each Gif returned\nconst GifList = (props) => {\n    const gifItems = props.gifs.map((image) => {\n        return <GifCard key={image.id} gif={image}/>\n    });\n\n    return (\n        <div className={\"container-body\"}>\n          <ul className=\"grid-container\"> {gifItems} </ul>\n        </div>\n    );\n};\n\n\n\n\n\n\n\nexport default GifList;","import React, {Component} from 'react';\nimport ReactDOM from 'react-dom';\nimport GifSearch from './components/Gif_search';\nimport GifList from './components/GifList';\nimport request from 'superagent';\n//import Throttle from 'superagent-throttle';\n\n\n// Commented out the throttle below as it is more efficient/performant to throttle the updating of \"query\" state\n\n// let queryLimiter = new Throttle({\n//   active: true,     // set false to pause queue\n//   rate: 1,          // how many requests can be sent every `ratePer`\n//   ratePer: 500,   // number of ms in which `rate` requests may be sent\n//   concurrent: 3     // how many requests can be sent concurrently\n// })\nclass App extends Component {\n    // gifs state is an array holding the ID and the mp4 img source of the searched for gifs\n    constructor() {\n        super();\n        this.state = {\n            gifs: []\n        };\n        this.handleQueryUpdate = this.handleQueryUpdate.bind(this);\n    }\n    // this function runs as soon as the page loads, returning 3 random Gifs.\n    // Loops through an array 3 times, as random gif API endpoint only returns a single gif\n    componentDidMount() {\n        const randomGifs = [];\n        for (let i = 0; i < 3; i++) {\n            request.get(\"https://api.giphy.com/v1/gifs/random?api_key=L80T6AbTm5TWhPsG1N2k9CVWup8R8JJv\", (err, res) => {\n                randomGifs.push(res.body.data);\n                this.setState({gifs: randomGifs})\n            })\n        }\n    }\n    // handleQueryUpdate runs every time the content of the searchbar changes.\n    handleQueryUpdate(query) {\n\n        // Access the value of the argument passed, and convert to string\n        let queryString = Object.values(query).toString();\n\n        // replace the spaces in the search with '+' and pass into the query string to make the API request\n        queryString = queryString.replace(/\\s/g, '+');\n        let url = `https://api.giphy.com/v1/gifs/search?api_key=L80T6AbTm5TWhPsG1N2k9CVWup8R8JJv&q=${queryString}&limit=9`;\n\n        // if the string has been erased or the page reloaded, get 3 random Gifs\n        if (queryString === \"\") {\n            this.componentDidMount();\n\n        //make a request based on user's search and store the response in gifs\n        } else {\n            request\n            .get(url) \n            .end((err, res) => {\n                //console.log(res.body.data);\n                this.setState({gifs: res.body.data});\n            })\n        \n            \n        }\n    }\n\n\n    render() {\n\n        return (\n            <div>\n                <div id={\"header\"}>\n                    <h1 id={\"title\"}> Giphy Grabber</h1>\n                </div>\n                <div>\n                    <GifSearch onQueryUpdate={query => this.handleQueryUpdate(query)} />\n                </div>\n                <GifList gifs={this.state.gifs}/>\n            </div>\n        );\n    }\n}\n\n\nReactDOM.render(<App />, document.getElementById('App'));"],"sourceRoot":""}